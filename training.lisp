(in-package #:epl-predictor)

(defun generate-training-data (start-week end-week &optional classes-p predictor-params)
  (let ((training-data nil))
    (setq matches nil)
    (dotimes (i (- start-week 1)) ;load previous week's matches
      (load-matches (1+ i)))
    (dotimes (i (- end-week start-week -1))
      (dotimes (j (length (nth (+ i start-week -1) match-data)))
        (let* ((d  (nth j (nth (+ i start-week -1) match-data)))
               (ht (nth 0 d)) 
               (at (nth 1 d)) 
               (hg (nth 2 d)) 
               (ag (nth 3 d)))
          (my-append training-data (list (generate-predictors ht at predictor-params)
                                        (cond ((> hg ag)  (if classes-p 1 0.167))
                                              ((eq hg ag) (if classes-p 2 0.5))
                                              (t          (if classes-p 3 0.833)))))))
      (load-matches (+ i start-week)))
    (setq matches nil)
    training-data))

(defun extract-predictors-and-responses (tr-data)
  (let ((predictors) (y))
    (dolist (x tr-data)
      (my-append predictors (append (list 1) (first x)))
      (my-append y (list (second x))))
    (values (create-matrix-from-list predictors) (create-matrix-from-list y))))